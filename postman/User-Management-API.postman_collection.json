{
  "info": {
    "name": "User Management API - ServeRest",
    "description": "Coleção completa de testes para API de gerenciamento de usuários com 100% de cobertura",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "1"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login - Successful",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has authorization token', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "    pm.expect(jsonData.authorization).to.be.a('string');",
                  "    pm.expect(jsonData.authorization.length).to.be.above(0);",
                  "    ",
                  "    // Salva o token para usar nas próximas requisições",
                  "    pm.environment.set('authToken', jsonData.authorization);",
                  "});",
                  "",
                  "pm.test('Response has success message', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Login realizado com sucesso');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has error message', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Email e/ou senha inválidos');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@email.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/login",
              "host": ["{{baseUrl}}"],
              "path": ["login"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users - GET",
      "item": [
        {
          "name": "Get All Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has usuarios array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has quantidade', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData.quantidade).to.be.a('number');",
                  "});",
                  "",
                  "pm.test('User structure is valid', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        var user = jsonData.usuarios[0];",
                  "        pm.expect(user).to.have.property('nome');",
                  "        pm.expect(user).to.have.property('email');",
                  "        pm.expect(user).to.have.property('password');",
                  "        pm.expect(user).to.have.property('administrador');",
                  "        pm.expect(user).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User has all required fields', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test('User ID matches requested ID', function () {",
                  "    var jsonData = pm.response.json();",
                  "    var requestedId = pm.environment.get('userId');",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Se não tiver userId, busca um usuário existente",
                  "if (!pm.environment.get('userId')) {",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/usuarios',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.json().usuarios.length > 0) {",
                  "            pm.environment.set('userId', response.json().usuarios[0]._id);",
                  "        }",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/usuarios/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "{{userId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Get User by ID - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/usuarios/invalidId123456789",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "invalidId123456789"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users - POST",
      "item": [
        {
          "name": "Create User - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('User created successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Cadastro realizado com sucesso');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    ",
                  "    // Salva o ID para usar em outros testes",
                  "    pm.environment.set('createdUserId', jsonData._id);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Gera um email único para cada execução",
                  "const timestamp = Date.now();",
                  "const randomNum = Math.floor(Math.random() * 10000);",
                  "pm.environment.set('uniqueEmail', `user${timestamp}${randomNum}@test.com`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Usuario Teste\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"senha123\",\n  \"administrador\": \"true\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          },
          "response": []
        },
        {
          "name": "Create User - Duplicate Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has duplicate email message', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Este email já está sendo usado');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Usuario Duplicado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"senha123\",\n  \"administrador\": \"false\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          },
          "response": []
        },
        {
          "name": "Create User - Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has validation errors', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"password\": \"senha123\",\n  \"administrador\": \"false\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          },
          "response": []
        },
        {
          "name": "Create User - Invalid Email Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has email validation error', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData.email).to.include('email');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Usuario Teste\",\n  \"email\": \"emailinvalido\",\n  \"password\": \"senha123\",\n  \"administrador\": \"false\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users - PUT",
      "item": [
        {
          "name": "Update User - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User updated successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Registro alterado com sucesso');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Gera um email único para atualização",
                  "const timestamp = Date.now();",
                  "const randomNum = Math.floor(Math.random() * 10000);",
                  "pm.environment.set('updateEmail', `updated${timestamp}${randomNum}@test.com`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Usuario Atualizado\",\n  \"email\": \"{{updateEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"false\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios/{{createdUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "{{createdUserId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update User - Create if Not Exists",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('User created successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Cadastro realizado com sucesso');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "    ",
                  "    // Salva o ID para deletar depois",
                  "    pm.environment.set('tempUserId', jsonData._id);",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Gera um email único",
                  "const timestamp = Date.now();",
                  "const randomNum = Math.floor(Math.random() * 10000);",
                  "pm.environment.set('newUserEmail', `newuser${timestamp}${randomNum}@test.com`);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Novo Usuario via PUT\",\n  \"email\": \"{{newUserEmail}}\",\n  \"password\": \"senha123\",\n  \"administrador\": \"false\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios/nonexistentid123",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "nonexistentid123"]
            }
          },
          "response": []
        },
        {
          "name": "Update User - Duplicate Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 400', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "pm.test('Response has message property', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Usa o email do usuário criado anteriormente",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Tentativa de Email Duplicado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"senha123\",\n  \"administrador\": \"false\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/usuarios/{{tempUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "{{tempUserId}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users - DELETE",
      "item": [
        {
          "name": "Delete User - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User deleted successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('excluído com sucesso');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/usuarios/{{createdUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "{{createdUserId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Temp User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('User deleted successfully', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('excluído com sucesso');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/usuarios/{{tempUserId}}",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "{{tempUserId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete User - Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response indicates no record found', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Nenhum registro excluído');",
                  "});",
                  "",
                  "pm.test('Response time is less than 2000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/usuarios/invalidId999999",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios", "invalidId999999"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Rate Limiting",
      "item": [
        {
          "name": "Check Rate Limit Headers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains rate limit information', function () {",
                  "    // ServeRest pode não implementar headers de rate limit,",
                  "    // mas este teste documenta a expectativa",
                  "    console.log('Rate Limit Test: API should handle 100 requests per minute');",
                  "    console.log('Response time: ' + pm.response.responseTime + 'ms');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/usuarios",
              "host": ["{{baseUrl}}"],
              "path": ["usuarios"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global executado antes de cada requisição",
          "console.log('Executing request to: ' + pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Validações globais para todas as requisições",
          "pm.test('Content-Type is application/json', function () {",
          "    pm.response.to.have.header('Content-Type');",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}
